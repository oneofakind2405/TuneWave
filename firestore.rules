/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a user-ownership model for user profiles and creator-ownership for events.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information. Only the user can read/write their own profile.
 * - /events/{eventId}: Stores event information. Anyone can read events, but only the creator can modify or delete them.
 * - /events/{eventId}/attendees/{userId}: Tracks attendees for each event. Only the user can manage their attendance.
 *
 * Key Security Decisions:
 * - Users can only access their own data under the /users/{userId} collection.
 * - Public Read for Events: Events are publicly readable to promote discoverability.
 * - Owner-Only Write for Events: Only the creator of an event can modify or delete it.
 * - Attendee subcollection allows users to manage their attendance of events.
 *
 * Denormalization for Authorization:
 * - Event documents MUST contain a `creatorId` field to easily authorize updates and deletes.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their profile.
     *   - Request: { "auth": { "uid": "user123" }, "resource": { "data": { "id": "user123", "name": "Test User", "email": "test@example.com", "initials": "TU", "memberSince": "2024-01-01T00:00:00Z" } } }
     * @allow (get, update, delete) User with ID 'user123' can read/write their profile.
     *   - Request: { "auth": { "uid": "user123" } }
     * @deny (create, update, delete) User with ID 'user456' cannot modify user 'user123' profile.
     *   - Request: { "auth": { "uid": "user456" } }
     * @principle Enforces user-ownership: Only the authenticated user can access their own profile.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // User listing is not permitted

      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to event documents.
     * @path /events/{eventId}
     * @allow (get, list) Any user can read/list events.
     *   - Request: { "auth": { "uid": "anyUser" } }
     * @allow (create) User with ID 'user123' can create a new event.
     *   - Request: { "auth": { "uid": "user123" }, "resource": { "data": { "id": "event456", "creatorId": "user123", "title": "My Event", "description": "Event description", "location": "Location", "date": "2024-01-02", "time": "19:00", "category": "Rock", "imageUrl": "http://example.com/image.jpg", "imageHint": "hint", "views": 0 } } }
     * @allow (update, delete) User with ID 'user123' can modify/delete event 'event456' if they are the creator.
     *   - Request: { "auth": { "uid": "user123" } }
     * @deny (create) User with ID 'user456' cannot create an event with creatorId 'user123'.
     *   - Request: { "auth": { "uid": "user456" }, "resource": { "data": { "id": "event789", "creatorId": "user123", "title": "My Event", "description": "Event description", "location": "Location", "date": "2024-01-02", "time": "19:00", "category": "Rock", "imageUrl": "http://example.com/image.jpg", "imageHint": "hint", "views": 0 } } }
     * @deny (update, delete) User with ID 'user456' cannot modify/delete event 'event456' created by 'user123'.
     *   - Request: { "auth": { "uid": "user456" } }
     * @principle Public read, owner-only writes: Events are publicly readable, but only the creator can modify or delete them.
     */
    match /events/{eventId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.creatorId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.creatorId);
      allow delete: if isExistingOwner(resource.data.creatorId);
    }

    /**
     * @description Controls access to event attendees.
     * @path /events/{eventId}/attendees/{userId}
     * @allow (create) User with ID 'user123' can join the event.
     *   - Request: { "auth": { "uid": "user123" }, "resource": { "data": { "joinedAt": "2024-01-01T00:00:00Z" } } }
     * @allow (get, update, delete) User with ID 'user123' can manage their attendance.
     *   - Request: { "auth": { "uid": "user123" } }
     * @deny (create, update, delete) User with ID 'user456' cannot join/modify the attendance of user 'user123'.
     *   - Request: { "auth": { "uid": "user456" } }
     * @principle Enforces user-ownership for attendance: Only the authenticated user can manage their own attendance.
     */
    match /events/{eventId}/attendees/{userId} {
        allow get: if isOwner(userId);
        allow list: if false; // Listing attendees is not permitted at this level.

        allow create: if isOwner(userId);
        allow update: if isExistingOwner(userId);
        allow delete: if isExistingOwner(userId);
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}