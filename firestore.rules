/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a user-ownership model for user profiles
 * and creator-ownership for events. It allows public read access to event
 * details while restricting modifications to the event creator. Attendee
 * subcollections are secured to allow only authenticated users to manage their
 * own attendance records.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles.
 * - /events/{eventId}: Stores event information.
 * - /events/{eventId}/attendees/{userId}: Stores information about event attendees.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Events are publicly readable, but only the creator can modify them.
 * - Users can only create or delete their own attendance records for an event.
 * - Listing of users is disallowed to protect privacy.
 *
 * Denormalization for Authorization:
 * - The 'Event' entity includes a 'creatorId' field, which is used to
 *   determine event ownership, avoiding the need for additional reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile data. Users can only
     *              read and write their own profile.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their own profile.
     *        Request: { auth.uid: 'user123', resource.data.id: 'user123' }
     * @allow (get) User with ID 'user123' can read their own profile.
     *        Request: { auth.uid: 'user123' }
     * @allow (update) User with ID 'user123' can update their own profile.
     *        Request: { auth.uid: 'user123' }
     * @deny (create) User with ID 'user456' cannot create a profile with ID 'user123'.
     *       Request: { auth.uid: 'user456', resource.data.id: 'user123' }
     * @deny (get) User with ID 'user456' cannot read user 'user123' profile.
     *       Request: { auth.uid: 'user456' }
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isOwner(userId) && resource.data.id == request.resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to event data. Events are publicly
     *              readable, but only the creator can modify them.
     * @path /events/{eventId}
     * @allow (get) Any user can read event details.
     *        Request: { auth.uid: 'user123' }
     * @allow (list) Any user can list event details.
     *        Request: { auth.uid: 'user123' }
     * @allow (create) User with ID 'user123' can create a new event.
     *        Request: { auth.uid: 'user123', resource.data.creatorId: 'user123' }
     * @deny (update) User with ID 'user456' cannot update an event created by 'user123'.
     *       Request: { auth.uid: 'user456', resource.data.creatorId: 'user123' }
     * @principle Enforces creator-only writes for events while allowing public reads.
     */
    match /events/{eventId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.creatorId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.creatorId);
      allow delete: if isExistingOwner(resource.data.creatorId);
    }

    /**
     * @description Controls access to event attendee data. Users can only
     *              manage their own attendance records for an event.
     * @path /events/{eventId}/attendees/{userId}
     * @allow (create) User with ID 'user123' can create their own attendance record for event 'event001'.
     *        Request: { auth.uid: 'user123' }
     * @allow (get) User with ID 'user123' can get their own attendance record for event 'event001'.
     *        Request: { auth.uid: 'user123' }
     * @allow (update) Not allowed.
     * @deny (delete) User with ID 'user456' cannot delete user 'user123' attendance record for event 'event001'.
     *       Request: { auth.uid: 'user456' }
     * @principle Enforces user-ownership for attendee records within an event.
     */
    match /events/{eventId}/attendees/{userId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if false;
      allow delete: if isExistingOwner(userId);
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isSignedIn() && isOwner(userId) && resource != null;
  }
}