/**
 * @fileoverview Firestore Security Rules for the Music Events App.
 *
 * Core Philosophy:
 * This ruleset prioritizes user-owned data and public readability while restricting unauthorized modifications.
 * It implements a strict separation of concerns, ensuring that only the owner can create, update, or delete their respective resources, while allowing public read access to events.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles. Only the authenticated user can read/write their own profile.
 * - /events/{eventId}: Stores event details. Any user can read event details, but only the creator can modify them.
 * - /events/{eventId}/attendees/{userId}: Tracks event attendees.
 *
 * Key Security Decisions:
 * - User listing is disallowed to protect privacy and prevent enumeration attacks.
 * - Event data is publicly readable to promote discoverability. However, writes are restricted to the event creator.
 * - The rules explicitly deny write access where it is not explicitly granted.
 *
 * Denormalization for Authorization:
 * - The `Event` entity includes a `creatorId` field, enabling fast ownership checks without additional `get()` calls.
 *   This is crucial for efficient and secure `update` and `delete` operations.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) If the user's ID matches the requested document ID.
     * @allow (get, update, delete) If the user is the owner of the document.
     * @deny (list) Listing users is not permitted.
     * @deny (create, update, delete) If the user is not the owner of the document.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      // Only signed-in users can attempt any operations
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to event documents.
     * @path /events/{eventId}
     * @allow (get, list) Events are publicly readable.
     * @allow (create) Only signed-in users can create events. The 'creatorId' must match the user's ID.
     * @allow (update, delete) Only the event creator can modify or delete events.
     * @deny (create) If the 'creatorId' does not match the user's ID.
     * @deny (update, delete) If the user is not the owner of the document.
     * @principle Allows public reads, but restricts writes to the event creator.
     */
    match /events/{eventId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.creatorId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.creatorId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.creatorId);
    }

    /**
     * @description Controls access to event attendees subcollection.
     * @path /events/{eventId}/attendees/{userId}
     * @allow (create) Any signed-in user can join an event (create an attendee document). The 'userId' must match the authenticated user's ID.
     * @allow (get) Any signed-in user can read attendance information if they are the attendee.
     * @allow (list) No listing attendance information outside user's scope
     * @allow (update, delete) Only the user (attendee) can update/delete their attendance record.
     * @deny (create) If the userId does not match the authenticated user's ID.
     * @principle Enforces that only the user can manage their own attendance record.
     */
    match /events/{eventId}/attendees/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isSignedIn() && isOwner(userId) && resource != null;
    }
  }
}