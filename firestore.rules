/**
 * @fileoverview Firestore Security Rules for the Music Events App.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user profiles and creator-ownership for events. Users can only read and modify their own profile data.
 * Events can be created by any authenticated user, but only the creator can update or delete them.
 * Attending subcollections are used to manage event attendees, with read and write access granted to event attendees.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information.  The `userId` in the path must match the `id` field in the document.
 * - /events/{eventId}: Stores event documents.  Events have a `creatorId` field indicating the user who created the event.
 * - /events/{eventId}/attendees/{userId}: Subcollection to track attendees for each event. Document ID is the user ID.
 *
 * Key Security Decisions:
 * - Users can only list their own attending events.
 * - Public read access is enabled for events, but writes are restricted to the creator.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to read and write their own user profile data.
     * @path /users/{userId}
     * @allow (get, update, delete) User with ID 'user123' can read/write data at /users/user123.
     * @allow (create) User with ID 'user123' can create a document at /users/user123 if the document's id matches their user ID.
     * @deny (get, update, delete) User with ID 'user456' cannot read/write data at /users/user123.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow update: if isExistingOwner(userId) && request.resource.data.id == request.auth.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows anyone to read events, but only the creator can modify or delete them.
     * @path /events/{eventId}
     * @allow (get, list) Any user can read any event.
     * @allow (create) User with ID 'user123' can create an event with creatorId 'user123'.
     * @deny (update, delete) User with ID 'user456' cannot update/delete an event created by 'user123'.
     * @principle Allows public reads with owner-only writes.
     */
    match /events/{eventId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner() {
        return isSignedIn() && request.auth.uid == resource.data.creatorId;
      }

      function isExistingOwner() {
        return isOwner();
      }
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isExistingOwner() && request.resource.data.creatorId == request.auth.uid;
      allow delete: if isExistingOwner();
    }

    /**
     * @description Allows users to read and write their own attendance records for events they are attending.
     * @path /events/{eventId}/attendees/{userId}
     * @allow (get, create, update, delete) User with ID 'user123' can read/write their attendance record at /events/{eventId}/attendees/user123.
     * @deny (get, create, update, delete) User with ID 'user456' cannot read/write attendance record at /events/{eventId}/attendees/user123.
     * @principle Enforces document ownership for attendance records within events.
     */
    match /events/{eventId}/attendees/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
    
     /**
      * @description Allows users to list events they are attending.
      * @path /users/{userId}/attending
      * @allow (list) User with ID 'user123' can list events they are attending.
      * @deny (list) User with ID 'user456' cannot list events that 'user123' is attending.
      * @principle Enforces document ownership for listing events within user profile.
      */
     match /users/{userId}/attending/{eventId} {
        function isSignedIn() {
          return request.auth != null;
        }
  
        function isOwner(userId) {
          return request.auth.uid == userId;
        }
        
        allow get: if false;
        allow list: if isOwner(userId);
        allow create: if false;
        allow update: if false;
        allow delete: if false;
     }
  }
}