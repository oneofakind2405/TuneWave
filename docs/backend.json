{
  "entities": {
    "Event": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Event",
      "type": "object",
      "description": "Represents a music event.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the event."
        },
        "title": {
          "type": "string",
          "description": "Title of the event."
        },
        "description": {
          "type": "string",
          "description": "Detailed description of the event."
        },
        "location": {
          "type": "string",
          "description": "Location where the event is held."
        },
        "dateTime": {
          "type": "string",
          "description": "Date and time of the event.",
          "format": "date-time"
        },
        "categoryId": {
          "type": "string",
          "description": "Reference to Category. (Relationship: Category 1:N Event)"
        }
      },
      "required": [
        "id",
        "title",
        "description",
        "location",
        "dateTime",
        "categoryId"
      ]
    },
    "Category": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Category",
      "type": "object",
      "description": "Represents a category of music events.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the category."
        },
        "name": {
          "type": "string",
          "description": "Name of the category (e.g., Rock, Pop, Electronic)."
        }
      },
      "required": [
        "id",
        "name"
      ]
    },
    "BlogPost": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "BlogPost",
      "type": "object",
      "description": "Represents a blog post about music or artists.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the blog post."
        },
        "title": {
          "type": "string",
          "description": "Title of the blog post."
        },
        "content": {
          "type": "string",
          "description": "Content of the blog post."
        },
        "author": {
          "type": "string",
          "description": "Author of the blog post."
        },
        "publicationDate": {
          "type": "string",
          "description": "Date when the blog post was published.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "title",
        "content",
        "author",
        "publicationDate"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/categories/{categoryId}",
        "definition": {
          "entityName": "Category",
          "schema": {
            "$ref": "#/backend/entities/Category"
          },
          "description": "Stores music event categories.  Each document represents a category like 'Rock', 'Pop', etc.",
          "params": [
            {
              "name": "categoryId",
              "description": "Unique identifier for the category."
            }
          ]
        }
      },
      {
        "path": "/events/{eventId}",
        "definition": {
          "entityName": "Event",
          "schema": {
            "$ref": "#/backend/entities/Event"
          },
          "description": "Stores music events. Includes details like title, description, location, date, time, and categoryId.",
          "params": [
            {
              "name": "eventId",
              "description": "Unique identifier for the event."
            }
          ]
        }
      },
      {
        "path": "/blog_posts/{blogPostId}",
        "definition": {
          "entityName": "BlogPost",
          "schema": {
            "$ref": "#/backend/entities/BlogPost"
          },
          "description": "Stores blog posts about music or artists.  Includes title, content, author, and publication date.",
          "params": [
            {
              "name": "blogPostId",
              "description": "Unique identifier for the blog post."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore structure is designed to support the TuneWave application, focusing on event listings, category filters, and blog posts.  Authorization Independence is achieved through clear path-based ownership for user-related data (though no user-specific data is explicitly defined in the request).  Since there is no explicit authorization requirement, the data structure is straightforward. QAPs are naturally supported due to the segregation of data into distinct collections, avoiding the need for complex filtering within rules.\n\nCategories and Events follow a standard pattern.  Blog posts are also stored in their own collection. This flat structure supports efficient listing and querying."
  }
}